// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "assignment-golang-backend/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: e
func (_m *UserRepository) CreateUser(e *entity.User) (*entity.User, int, error) {
	ret := _m.Called(e)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(*entity.User) *entity.User); ok {
		r0 = rf(e)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(*entity.User) int); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*entity.User) error); ok {
		r2 = rf(e)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *UserRepository) GetUserByEmail(email string) (*entity.User, int, error) {
	ret := _m.Called(email)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserByID provides a mock function with given fields: walletID
func (_m *UserRepository) GetUserByID(walletID int) (*entity.User, int, error) {
	ret := _m.Called(walletID)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(int) *entity.User); ok {
		r0 = rf(walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(walletID)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(walletID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserDetails provides a mock function with given fields: walletid
func (_m *UserRepository) GetUserDetails(walletid int) (*entity.User, error) {
	ret := _m.Called(walletid)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(int) *entity.User); ok {
		r0 = rf(walletid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(walletid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalanceByWalletID provides a mock function with given fields: id, amount
func (_m *UserRepository) UpdateBalanceByWalletID(id int, amount int) (*entity.User, error) {
	ret := _m.Called(id, amount)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(int, int) *entity.User); ok {
		r0 = rf(id, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
